import{_ as e,c as a,o as t,N as o}from"./chunks/framework.d5c3a6a5.js";const b=JSON.parse('{"title":"Auth: Vistas y Componentes","description":"","frontmatter":{},"headers":[],"relativePath":"vue/auth-views-and-components.md"}'),s={name:"vue/auth-views-and-components.md"},r=o('<h1 id="auth-vistas-y-componentes" tabindex="-1">Auth: Vistas y Componentes <a class="header-anchor" href="#auth-vistas-y-componentes" aria-label="Permalink to &quot;Auth: Vistas y Componentes&quot;">​</a></h1><p>Aquí hay un desglose de cada uno de los componentes y vistas de Vue que se utilizan para gestionar la autenticación de usuarios, el restablecimiento de contraseñas y la verificación de correo electrónico.</p><h2 id="vista-home-vue" tabindex="-1">Vista <code>Home.vue</code> <a class="header-anchor" href="#vista-home-vue" aria-label="Permalink to &quot;Vista `Home.vue`&quot;">​</a></h2><p><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/src/modules/Auth/views/Home.vue" target="_blank" rel="noreferrer"><strong><code>src/modules/Auth/views/Home.vue</code></strong></a> forma parte del módulo <code>Auth</code>. Básicamente es una pantalla de bienvenida que se le brinda al usuario con la opción de elegir dos botones en el caso de que no haya iniciado sesión:</p><ol><li><em>&quot;Registrarse&quot;</em></li><li><em>&quot;Iniciar sesión&quot;</em></li></ol><p>Esta vista es muy sencilla, sin embargo, ya tiene sus correspondientes pruebas automatizadas para garantizar siempre su buen funcionamiento.</p><ul><li><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/tests/modules/auth/views/homeMountedCorrectly.spec.ts" target="_blank" rel="noreferrer"><code>tests/modules/auth/views/homeMountedCorrectly.spec.ts</code></a></li><li><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/tests/modules/auth/views/homeLinksWork.ts" target="_blank" rel="noreferrer"><code>tests/modules/auth/views/homeLinksWork.spec.ts</code></a></li></ul><h2 id="vista-register-vue" tabindex="-1">Vista <code>Register.vue</code> <a class="header-anchor" href="#vista-register-vue" aria-label="Permalink to &quot;Vista `Register.vue`&quot;">​</a></h2><p><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/src/modules/Auth/views/Register.vue" target="_blank" rel="noreferrer"><strong><code>src/modules/Auth/views/Register.vue</code></strong></a> permite a los usuarios registrarse para obtener una cuenta si no tienen una. Funciona con el punto final <code>/register</code> de Fortify. Solo funciona cuando un usuario no ha iniciado sesión, no puede usarlo para agregar usuarios si ha iniciado sesión. Para agregar usuarios a través de una pantalla de administración, necesitaríamos crear otro punto final de API y modificar este componente para publicarlo también. Por ahora, se mantiene simplemente para registrar nuevos usuarios. Una vez que un usuario se registra correctamente, inicia sesión automáticamente y se le redirige al panel.</p><p>Esta vista importa dos archivos:</p><ol><li><p><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/src/modules/Auth/components/FormRegister.vue" target="_blank" rel="noreferrer"><code>src/modules/Auth/components/FormRegister.vue</code></a>: Este componente encapsula el formulario para hacer más fácil la prueba de la emisión del evento <code>submit</code>.</p></li><li><p><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/src/modules/Auth/composables/useRegister.ts" target="_blank" rel="noreferrer"><code>src/modules/Auth/composables/useRegister.ts</code></a>: Este composable mantiene la lógica de negocio separada de la interfaz del usuario.</p></li></ol><p>Y por último las respectivas pruebas automatizadas asociadas a la vista de registro:</p><ul><li><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/tests/modules/auth/views/registerMountedCorrectly.spec.ts" target="_blank" rel="noreferrer"><code>tests/modules/auth/views/registerMountedCorrectly.spec.ts </code></a></li><li><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/tests/modules/auth/services/registerFetchMock.spec.ts" target="_blank" rel="noreferrer"><code>tests/modules/auth/services/registerFetchMock.spec.ts</code></a></li><li><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/tests/modules/auth/components/formRegisterInteractingWith.spec.ts" target="_blank" rel="noreferrer"><code>tests/modules/auth/components/formRegisterInteractingWith.spec.ts</code></a></li><li><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/tests/modules/auth/components/formRegisterMountedCorrectly.spec.ts" target="_blank" rel="noreferrer"><code>tests/modules/auth/components/formRegisterMountedCorrectly.spec.ts</code></a></li></ul><h2 id="vista-de-login-vue" tabindex="-1">Vista de <code>Login.vue</code> <a class="header-anchor" href="#vista-de-login-vue" aria-label="Permalink to &quot;Vista de `Login.vue`&quot;">​</a></h2><p><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/src/modules/Auth/views/Login.vue" target="_blank" rel="noreferrer"><strong><code>src/modules/Auth/views/Login.vue</code></strong></a> funciona con el punto final <code>/login</code> de Fortify. Tenga en cuenta que todos los puntos finales de autenticación se mantienen en <a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/src/modules/Auth/services/index.ts" target="_blank" rel="noreferrer"><code>src/modules/Auth/services/index.ts</code></a>. Una vez que un usuario inicia sesión correctamente, se le redirige al panel de control.</p><p>Esta vista importa dos archivos:</p><ol><li><p><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/src/modules/Auth/components/FormLogin.vue" target="_blank" rel="noreferrer"><code>src/modules/Auth/components/FormLogin.vue</code></a>: Este componente encapsula el formulario para hacer más fácil la prueba de la emisión del evento <code>submit</code>.</p></li><li><p><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/src/modules/Auth/composables/useLogin.ts" target="_blank" rel="noreferrer"><code>src/modules/Auth/composables/useLogin.ts</code></a>: Este composable mantiene la lógica de negocio separada de la interfaz del usuario.</p></li></ol><p>Y por último las respectivas pruebas automatizadas asociadas a la vista de inicio de sesión:</p><ul><li><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/tests/modules/auth/views/loginMountedCorrectly.spec.ts" target="_blank" rel="noreferrer"><code>tests/modules/auth/views/loginMountedCorrectly.spec.ts </code></a></li><li><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/tests/modules/auth/services/loginFetchMock.spec.ts" target="_blank" rel="noreferrer"><code>tests/modules/auth/services/loginFetchMock.spec.ts</code></a></li><li><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/tests/modules/auth/components/formLoginInteractingWith.spec.ts" target="_blank" rel="noreferrer"><code>tests/modules/auth/components/formLoginInteractingWith.spec.ts</code></a></li><li><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/tests/modules/auth/components/formLoginMountedCorrectly.spec.ts" target="_blank" rel="noreferrer"><code>tests/modules/auth/components/formLoginMountedCorrectly.spec.ts</code></a></li></ul><h2 id="componente-logout-vue" tabindex="-1">Componente <code>Logout.vue</code> <a class="header-anchor" href="#componente-logout-vue" aria-label="Permalink to &quot;Componente `Logout.vue`&quot;">​</a></h2><p><a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/src/modules/Auth/components/Logout.vue" target="_blank" rel="noreferrer"><strong><code>src/modules/Auth/components/Logout.vue</code></strong></a> Es un componente simple que funciona con el punto final <code>/logout</code> de Fortify. Cuando se cierra la sesión de un usuario, se envía la acción de <code>authStore.logout()</code> que borra al usuario del <code>Store</code> y lo redirige a la vista de inicio de sesión.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Lo que sigue a continuación en este apartado no está aún revisado...</p></div><h2 id="dashboard-view-protected-path" tabindex="-1">Dashboard View (Protected Path) <a class="header-anchor" href="#dashboard-view-protected-path" aria-label="Permalink to &quot;Dashboard View (Protected Path)&quot;">​</a></h2><p><a href="https://github.com/garethredfern/laravel-vue/blob/main/src/views/Dashboard.vue" target="_blank" rel="noreferrer">View file on GitHub</a></p><p>This component requires authentication before it can be used. A board could show much more, but the important thing here is that it is protected. A user must be registered to view it.</p><h2 id="forgot-password-view" tabindex="-1">Forgot Password View <a class="header-anchor" href="#forgot-password-view" aria-label="Permalink to &quot;Forgot Password View&quot;">​</a></h2><p><a href="https://github.com/garethredfern/laravel-vue/blob/main/src/views/ForgotPassword.vue" target="_blank" rel="noreferrer">View file on GitHub</a></p><p>The forgot password view can be accessed if a user is not logged in and needs to reset their password. It works with the Fortify /forgot-password endpoint. Once the form is submitted Laravel will check the email is valid and send out a reset password email. The link in this email will have a token and the URL will point to the reset password view in the SPA.</p><h2 id="reset-password-view" tabindex="-1">Reset Password View <a class="header-anchor" href="#reset-password-view" aria-label="Permalink to &quot;Reset Password View&quot;">​</a></h2><p><a href="https://github.com/garethredfern/laravel-vue/blob/main/src/views/ResetPassword.vue" target="_blank" rel="noreferrer">View file on GitHub</a></p><p>The reset password view displays a form where a user can change their password. Importantly it will also have access to the token provided by Laravel. It works with the Fortify /reset-password endpoint. When the form is submitted the users email and token are checked by Laravel. If everything was successful, a message is displayed and the user can log in.</p><h2 id="update-password-component" tabindex="-1">Update Password Component <a class="header-anchor" href="#update-password-component" aria-label="Permalink to &quot;Update Password Component&quot;">​</a></h2><p><a href="https://github.com/garethredfern/laravel-vue/blob/main/src/components/UpdatePassword.vue" target="_blank" rel="noreferrer">View file on GitHub</a></p><p>This form allows a logged-in user to update their password. It works with the Fortify /user/password endpoint.</p><h2 id="email-verification" tabindex="-1">Email Verification <a class="header-anchor" href="#email-verification" aria-label="Permalink to &quot;Email Verification&quot;">​</a></h2><p><a href="https://github.com/garethredfern/laravel-vue/blob/main/src/components/VerifyEmail.vue" target="_blank" rel="noreferrer">View file on GitHub</a></p><p>Laravel provides the ability for a user to verify their email as an added layer of security. This component works with the /email/verification-notification endpoint. To get the email notification working, there is some set up required within the Laravel API. More detail in these instructions.</p><p>With this in place, the SPA will check a user is verified using the details in the auth Vuex store. If they are not, a button is displayed, when clicked the verification email will be sent by Laravel. The email will have a link to verify and return the user back to the SPA dashboard.</p><h2 id="flash-message-component" tabindex="-1">Flash Message Component <a class="header-anchor" href="#flash-message-component" aria-label="Permalink to &quot;Flash Message Component&quot;">​</a></h2><p><a href="https://github.com/garethredfern/laravel-vue/blob/main/src/components/FlashMessage.vue" target="_blank" rel="noreferrer">View file on GitHub</a></p><p>While the user is interacting with the API via the SPA we need to give them success and error messages. The Laravel API will be handling a lot of these messages, but we can also use catch try/catch blocks to display messages within the SPA. To keep things all in one place there is a FlashMessage component which takes a message and error prop.</p>',41),i=[r];function n(l,u,c,d,h,p){return t(),a("div",null,i)}const g=e(s,[["render",n]]);export{b as __pageData,g as default};
