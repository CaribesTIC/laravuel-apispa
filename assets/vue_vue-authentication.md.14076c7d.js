import{_ as e,c as a,o,N as t}from"./chunks/framework.d5c3a6a5.js";const f=JSON.parse('{"title":"Autenticación - Vue SPA","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue-authentication.md"}'),s={name:"vue/vue-authentication.md"},i=t('<h1 id="autenticacion-vue-spa" tabindex="-1">Autenticación - Vue SPA <a class="header-anchor" href="#autenticacion-vue-spa" aria-label="Permalink to &quot;Autenticación - Vue SPA&quot;">​</a></h1><h2 id="puntos-finales-de-autenticacion-y-cors" tabindex="-1">Puntos finales de autenticación y CORS <a class="header-anchor" href="#puntos-finales-de-autenticacion-y-cors" aria-label="Permalink to &quot;Puntos finales de autenticación y CORS&quot;">​</a></h2><p>El archivo <a href="https://github.com/CaribesTIC/laravuel-spa/blob/main/src/modules/Auth/services/index.ts" target="_blank" rel="noreferrer">src/modules/Auth/services/index.ts</a> mantiene todos los puntos finales de autenticación de API en un solo lugar. Los métodos en este archivo interactúan con <a href="./../laravel/laravel-authentication.html#configuracion-de-fortify">los puntos finales de Fortify que hemos configurado previamente</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Es importante resaltar que esto requiere que el SPA y la API compartan el mismo dominio de nivel superior. Sin embargo, pueden colocarse en diferentes subdominios.</p></div><h2 id="sesiones-cookies-y-csrf" tabindex="-1">Sesiones, Cookies y CSRF <a class="header-anchor" href="#sesiones-cookies-y-csrf" aria-label="Permalink to &quot;Sesiones, Cookies y CSRF&quot;">​</a></h2><p>Para autenticar nuestra SPA, la página de inicio de sesión primero debe realizar una solicitud al extremo <code>/sanctum/csrf-cookie</code> para inicializar la protección CSRF para la aplicación:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> Http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/sanctum/csrf-cookie</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>Esto también se aplica a cualquier otra acción de Fortify que requiera protección CSRF. Téngase en cuenta otras rutas en dicho módulo que también incluyen una solicitud de obtención de la cookie CSRF; <code>forgotPassword</code>, <code>resetPassword</code>, etc.</p><p>Si una solicitud de inicio de sesión tiene éxito, el usuario se autentica y las solicitudes posteriores al SPA se autenticarán automáticamente a través de la cookie de sesión que emite la aplicación Laravel. Además, dado que ya hicimos una solicitud a la ruta <code>/sanctum/csrf-cookie</code>, las solicitudes posteriores deberían recibir automáticamente protección CSRF porque Axios envía automáticamente la cookie XSRF-TOKEN en el encabezado X-XSRF-TOKEN.</p>',9),n=[i];function c(r,l,u,d,p,m){return o(),a("div",null,n)}const y=e(s,[["render",c]]);export{f as __pageData,y as default};
